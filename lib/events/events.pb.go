// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: events.proto

package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Metadata is a common event metadata
type Metadata struct {
	// Index is a monotonicaly incremented index in the event sequence
	Index int64 `protobuf:"varint,1,opt,name=Index,proto3" json:"ei"`
	// Type is the event type
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"event"`
	// ID is a unique event identifier
	ID string `protobuf:"bytes,3,opt,name=ID,proto3" json:"uid,omitempty"`
	// Code is a unique event code
	Code string `protobuf:"bytes,4,opt,name=Code,proto3" json:"code,omitempty"`
	// Time is event time
	Time                 time.Time `protobuf:"bytes,5,opt,name=Time,stdtime" json:"time"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(dst, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

// SesssionMetadata is a common session event metadata
type SessionMetadata struct {
	// SessionID is a unique UUID of the session.
	SessionID            string   `protobuf:"bytes,1,opt,name=SessionID,proto3" json:"sid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionMetadata) Reset()         { *m = SessionMetadata{} }
func (m *SessionMetadata) String() string { return proto.CompactTextString(m) }
func (*SessionMetadata) ProtoMessage()    {}
func (*SessionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{1}
}
func (m *SessionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionMetadata.Merge(dst, src)
}
func (m *SessionMetadata) XXX_Size() int {
	return m.Size()
}
func (m *SessionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SessionMetadata proto.InternalMessageInfo

// UserMetadata is a common user event metadata
type UserMetadata struct {
	// User is teleport user name
	User string `protobuf:"bytes,1,opt,name=User,proto3" json:"user"`
	// Login is OS login
	Login                string   `protobuf:"bytes,2,opt,name=Login,proto3" json:"login,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserMetadata) Reset()         { *m = UserMetadata{} }
func (m *UserMetadata) String() string { return proto.CompactTextString(m) }
func (*UserMetadata) ProtoMessage()    {}
func (*UserMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{2}
}
func (m *UserMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMetadata.Merge(dst, src)
}
func (m *UserMetadata) XXX_Size() int {
	return m.Size()
}
func (m *UserMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_UserMetadata proto.InternalMessageInfo

// Server is a server information
type ServerMetadata struct {
	// ServerNamespace is a namespace of the server event
	ServerNamespace string `protobuf:"bytes,1,opt,name=ServerNamespace,proto3" json:"namespace,omitempty"`
	// ServerID is the UUID of the server the session occurred on.
	ServerID string `protobuf:"bytes,2,opt,name=ServerID,proto3" json:"server_id"`
	// ServerHostname is the hostname of the server the session occurred on.
	ServerHostname string `protobuf:"bytes,3,opt,name=ServerHostname,proto3" json:"server_hostname,omitempty"`
	// ServerLabels are the labels (static and dynamic) of the server the
	// session occurred on.
	ServerLabels         map[string]string `protobuf:"bytes,4,rep,name=ServerLabels" json:"server_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServerMetadata) Reset()         { *m = ServerMetadata{} }
func (m *ServerMetadata) String() string { return proto.CompactTextString(m) }
func (*ServerMetadata) ProtoMessage()    {}
func (*ServerMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{3}
}
func (m *ServerMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServerMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerMetadata.Merge(dst, src)
}
func (m *ServerMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ServerMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ServerMetadata proto.InternalMessageInfo

// Connection contains connection infro
type ConnectionMetadata struct {
	// LocalAddr is a target address on the host
	LocalAddr string `protobuf:"bytes,1,opt,name=LocalAddr,proto3" json:"addr.local,omitempty"`
	// RemoteAddr is a client (user's) address
	RemoteAddr           string   `protobuf:"bytes,2,opt,name=RemoteAddr,proto3" json:"addr.remote,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectionMetadata) Reset()         { *m = ConnectionMetadata{} }
func (m *ConnectionMetadata) String() string { return proto.CompactTextString(m) }
func (*ConnectionMetadata) ProtoMessage()    {}
func (*ConnectionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{4}
}
func (m *ConnectionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConnectionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionMetadata.Merge(dst, src)
}
func (m *ConnectionMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionMetadata proto.InternalMessageInfo

// SessionStart is a session start event
type SessionStart struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// User is a common user event metadata
	UserMetadata `protobuf:"bytes,2,opt,name=User,embedded=User" json:""`
	// SessionMetadata is a common event session metadata
	SessionMetadata `protobuf:"bytes,3,opt,name=Session,embedded=Session" json:""`
	// ServerMetadata is a common server metadata
	ServerMetadata `protobuf:"bytes,4,opt,name=Server,embedded=Server" json:""`
	// ConnectionMetadata holds information about the connection
	ConnectionMetadata `protobuf:"bytes,5,opt,name=Connection,embedded=Connection" json:""`
	// TerminalSize is expressed as 'W:H'
	TerminalSize         string   `protobuf:"bytes,6,opt,name=TerminalSize,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionStart) Reset()         { *m = SessionStart{} }
func (m *SessionStart) String() string { return proto.CompactTextString(m) }
func (*SessionStart) ProtoMessage()    {}
func (*SessionStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{5}
}
func (m *SessionStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionStart.Merge(dst, src)
}
func (m *SessionStart) XXX_Size() int {
	return m.Size()
}
func (m *SessionStart) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionStart.DiscardUnknown(m)
}

var xxx_messageInfo_SessionStart proto.InternalMessageInfo

// SessionJoin emitted when another user joins a session
type SessionJoin struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// User is a common user event metadata
	UserMetadata `protobuf:"bytes,2,opt,name=User,embedded=User" json:""`
	// SessionMetadata is a common event session metadata
	SessionMetadata `protobuf:"bytes,3,opt,name=Session,embedded=Session" json:""`
	// ServerMetadata is a common server metadata
	ServerMetadata `protobuf:"bytes,4,opt,name=Server,embedded=Server" json:""`
	// ConnectionMetadata holds information about the connection
	ConnectionMetadata   `protobuf:"bytes,5,opt,name=Connection,embedded=Connection" json:""`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionJoin) Reset()         { *m = SessionJoin{} }
func (m *SessionJoin) String() string { return proto.CompactTextString(m) }
func (*SessionJoin) ProtoMessage()    {}
func (*SessionJoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{6}
}
func (m *SessionJoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionJoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionJoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionJoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionJoin.Merge(dst, src)
}
func (m *SessionJoin) XXX_Size() int {
	return m.Size()
}
func (m *SessionJoin) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionJoin.DiscardUnknown(m)
}

var xxx_messageInfo_SessionJoin proto.InternalMessageInfo

// SessionPrint event happens every time a write occurs to
// temirnal I/O during a session
type SessionPrint struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// ChunkIndex is a monotonicaly incremented index for ordering print events
	ChunkIndex int64 `protobuf:"varint,2,opt,name=ChunkIndex,proto3" json:"ci"`
	// Data is data transferred, it is not marshaled to JSON format
	Data []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"-"`
	// Bytes says how many bytes have been written into the session
	// during "print" event
	Bytes int64 `protobuf:"varint,4,opt,name=Bytes,proto3" json:"bytes"`
	// DelayMilliseconds is the delay in milliseconds from the start of the session
	DelayMilliseconds int64 `protobuf:"varint,5,opt,name=DelayMilliseconds,proto3" json:"ms"`
	// Offset is the offset in bytes in the session file
	Offset               int64    `protobuf:"varint,6,opt,name=Offset,proto3" json:"offset"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionPrint) Reset()         { *m = SessionPrint{} }
func (m *SessionPrint) String() string { return proto.CompactTextString(m) }
func (*SessionPrint) ProtoMessage()    {}
func (*SessionPrint) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{7}
}
func (m *SessionPrint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionPrint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionPrint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionPrint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionPrint.Merge(dst, src)
}
func (m *SessionPrint) XXX_Size() int {
	return m.Size()
}
func (m *SessionPrint) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionPrint.DiscardUnknown(m)
}

var xxx_messageInfo_SessionPrint proto.InternalMessageInfo

// Resize means that some user resized PTY on the client
type Resize struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// User is a common user event metadata
	UserMetadata `protobuf:"bytes,2,opt,name=User,embedded=User" json:""`
	// SessionMetadata is a common event session metadata
	SessionMetadata `protobuf:"bytes,3,opt,name=Session,embedded=Session" json:""`
	// ConnectionMetadata holds information about the connection
	ConnectionMetadata `protobuf:"bytes,4,opt,name=Connection,embedded=Connection" json:""`
	// ServerMetadata is a common server metadata
	ServerMetadata `protobuf:"bytes,5,opt,name=Server,embedded=Server" json:""`
	// TerminalSize is expressed as 'W:H'
	TerminalSize         string   `protobuf:"bytes,6,opt,name=TerminalSize,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resize) Reset()         { *m = Resize{} }
func (m *Resize) String() string { return proto.CompactTextString(m) }
func (*Resize) ProtoMessage()    {}
func (*Resize) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{8}
}
func (m *Resize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Resize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resize.Merge(dst, src)
}
func (m *Resize) XXX_Size() int {
	return m.Size()
}
func (m *Resize) XXX_DiscardUnknown() {
	xxx_messageInfo_Resize.DiscardUnknown(m)
}

var xxx_messageInfo_Resize proto.InternalMessageInfo

// SessionEnd is a session end event
type SessionEnd struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// User is a common user event metadata
	UserMetadata `protobuf:"bytes,2,opt,name=User,embedded=User" json:""`
	// SessionMetadata is a common event session metadata
	SessionMetadata `protobuf:"bytes,3,opt,name=Session,embedded=Session" json:""`
	// ConnectionMetadata holds information about the connection
	ConnectionMetadata `protobuf:"bytes,4,opt,name=Connection,embedded=Connection" json:""`
	// ServerMetadata is a common server metadata
	ServerMetadata `protobuf:"bytes,5,opt,name=Server,embedded=Server" json:""`
	// EnhancedRecording is used to indicate if the recording was an
	// enhanced recording or not.
	EnhancedRecording bool `protobuf:"varint,6,opt,name=EnhancedRecording,proto3" json:"enhanced_recording"`
	// Interactive is used to indicate if the session was interactive
	// (has PTY attached) or not (exec session).
	Interactive bool `protobuf:"varint,7,opt,name=Interactive,proto3" json:"interactive"`
	// Participants is a list of participants in the session.
	Participants         []string `protobuf:"bytes,8,rep,name=Participants" json:"participants"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionEnd) Reset()         { *m = SessionEnd{} }
func (m *SessionEnd) String() string { return proto.CompactTextString(m) }
func (*SessionEnd) ProtoMessage()    {}
func (*SessionEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{9}
}
func (m *SessionEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionEnd.Merge(dst, src)
}
func (m *SessionEnd) XXX_Size() int {
	return m.Size()
}
func (m *SessionEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionEnd.DiscardUnknown(m)
}

var xxx_messageInfo_SessionEnd proto.InternalMessageInfo

// BPFMetadata is a common BPF process metadata
type BPFMetadata struct {
	// PID is the ID of the process.
	PID uint64 `protobuf:"varint,1,opt,name=PID,proto3" json:"pid"`
	// CgroupID is the internal cgroupv2 ID of the event.
	CgroupID uint64 `protobuf:"varint,2,opt,name=CgroupID,proto3" json:"cgroup_id"`
	// Program is name of the executable.
	Program              string   `protobuf:"bytes,3,opt,name=Program,proto3" json:"program"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BPFMetadata) Reset()         { *m = BPFMetadata{} }
func (m *BPFMetadata) String() string { return proto.CompactTextString(m) }
func (*BPFMetadata) ProtoMessage()    {}
func (*BPFMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{10}
}
func (m *BPFMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BPFMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BPFMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BPFMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BPFMetadata.Merge(dst, src)
}
func (m *BPFMetadata) XXX_Size() int {
	return m.Size()
}
func (m *BPFMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_BPFMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_BPFMetadata proto.InternalMessageInfo

// Status contains common command or operation status fields
type Status struct {
	// Success indicates the success or failure of the operation
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"success"`
	// Error includes system error message for the failed attempt
	Error string `protobuf:"bytes,2,opt,name=Error,proto3" json:"error,omitempty"`
	// UserMessage is a user-friendly message for successfull or unsuccessfull auth attempt
	UserMessage          string   `protobuf:"bytes,3,opt,name=UserMessage,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{11}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

// SessionCommand is a session command event
type SessionCommand struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// User is a common user event metadata
	UserMetadata `protobuf:"bytes,2,opt,name=User,embedded=User" json:""`
	// SessionMetadata is a common event session metadata
	SessionMetadata `protobuf:"bytes,3,opt,name=Session,embedded=Session" json:""`
	// ServerMetadata is a common server metadata
	ServerMetadata `protobuf:"bytes,4,opt,name=Server,embedded=Server" json:""`
	// BPFMetadata is a common BPF subsystem metadata
	BPFMetadata `protobuf:"bytes,5,opt,name=BPF,embedded=BPF" json:""`
	// PPID is the PID of the parent process.
	PPID uint64 `protobuf:"varint,6,opt,name=PPID,proto3" json:"ppid"`
	// Path is the full path to the executable.
	Path string `protobuf:"bytes,7,opt,name=Path,proto3" json:"path"`
	// Argv is the list of arguments to the program. Note, the first element does
	// not contain the name of the process.
	Argv []string `protobuf:"bytes,8,rep,name=Argv" json:"argv"`
	// ReturnCode is the return code of execve.
	ReturnCode           int32    `protobuf:"varint,9,opt,name=ReturnCode,proto3" json:"return_code"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionCommand) Reset()         { *m = SessionCommand{} }
func (m *SessionCommand) String() string { return proto.CompactTextString(m) }
func (*SessionCommand) ProtoMessage()    {}
func (*SessionCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{12}
}
func (m *SessionCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionCommand.Merge(dst, src)
}
func (m *SessionCommand) XXX_Size() int {
	return m.Size()
}
func (m *SessionCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionCommand.DiscardUnknown(m)
}

var xxx_messageInfo_SessionCommand proto.InternalMessageInfo

// SessionDisk is a session disk access event
type SessionDisk struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// User is a common user event metadata
	UserMetadata `protobuf:"bytes,2,opt,name=User,embedded=User" json:""`
	// SessionMetadata is a common event session metadata
	SessionMetadata `protobuf:"bytes,3,opt,name=Session,embedded=Session" json:""`
	// ServerMetadata is a common server metadata
	ServerMetadata `protobuf:"bytes,4,opt,name=Server,embedded=Server" json:""`
	// BPFMetadata is a common BPF subsystem metadata
	BPFMetadata `protobuf:"bytes,5,opt,name=BPF,embedded=BPF" json:""`
	// Path is the full path to the executable.
	Path string `protobuf:"bytes,6,opt,name=Path,proto3" json:"path"`
	// Flags are the flags passed to open.
	Flags int32 `protobuf:"varint,7,opt,name=Flags,proto3" json:"flags"`
	// ReturnCode is the return code of disk open
	ReturnCode           int32    `protobuf:"varint,8,opt,name=ReturnCode,proto3" json:"return_code"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionDisk) Reset()         { *m = SessionDisk{} }
func (m *SessionDisk) String() string { return proto.CompactTextString(m) }
func (*SessionDisk) ProtoMessage()    {}
func (*SessionDisk) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{13}
}
func (m *SessionDisk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionDisk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionDisk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionDisk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionDisk.Merge(dst, src)
}
func (m *SessionDisk) XXX_Size() int {
	return m.Size()
}
func (m *SessionDisk) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionDisk.DiscardUnknown(m)
}

var xxx_messageInfo_SessionDisk proto.InternalMessageInfo

// SessionNetwork is a network event
type SessionNetwork struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// User is a common user event metadata
	UserMetadata `protobuf:"bytes,2,opt,name=User,embedded=User" json:""`
	// SessionMetadata is a common event session metadata
	SessionMetadata `protobuf:"bytes,3,opt,name=Session,embedded=Session" json:""`
	// ServerMetadata is a common server metadata
	ServerMetadata `protobuf:"bytes,4,opt,name=Server,embedded=Server" json:""`
	// BPFMetadata is a common BPF subsystem metadata
	BPFMetadata `protobuf:"bytes,5,opt,name=BPF,embedded=BPF" json:""`
	// SrcAddr is the source IP address of the connection.
	SrcAddr string `protobuf:"bytes,6,opt,name=SrcAddr,proto3" json:"src_addr"`
	// DstAddr is the destination IP address of the connection.
	DstAddr string `protobuf:"bytes,7,opt,name=DstAddr,proto3" json:"dst_addr"`
	// DstPort is the destination port of the connection.
	DstPort int32 `protobuf:"varint,8,opt,name=DstPort,proto3" json:"dst_port"`
	// TCPVersion is the version of TCP (4 or 6).
	TCPVersion           int32    `protobuf:"varint,9,opt,name=TCPVersion,proto3" json:"version"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionNetwork) Reset()         { *m = SessionNetwork{} }
func (m *SessionNetwork) String() string { return proto.CompactTextString(m) }
func (*SessionNetwork) ProtoMessage()    {}
func (*SessionNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{14}
}
func (m *SessionNetwork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionNetwork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionNetwork.Merge(dst, src)
}
func (m *SessionNetwork) XXX_Size() int {
	return m.Size()
}
func (m *SessionNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_SessionNetwork proto.InternalMessageInfo

// SessionData is emitted to report session data usage.
type SessionData struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// User is a common user event metadata
	UserMetadata `protobuf:"bytes,2,opt,name=User,embedded=User" json:""`
	// SessionMetadata is a common event session metadata
	SessionMetadata `protobuf:"bytes,3,opt,name=Session,embedded=Session" json:""`
	// ServerMetadata is a common server metadata
	ServerMetadata `protobuf:"bytes,4,opt,name=Server,embedded=Server" json:""`
	// ConnectionMetadata holds information about the connection
	ConnectionMetadata `protobuf:"bytes,5,opt,name=Connection,embedded=Connection" json:""`
	// BytesTransmitted is the amount of bytes transmitted
	BytesTransmitted uint64 `protobuf:"varint,6,opt,name=BytesTransmitted,proto3" json:"tx"`
	// BytesReceived is the amount of bytes received
	BytesReceived        uint64   `protobuf:"varint,7,opt,name=BytesReceived,proto3" json:"rx"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionData) Reset()         { *m = SessionData{} }
func (m *SessionData) String() string { return proto.CompactTextString(m) }
func (*SessionData) ProtoMessage()    {}
func (*SessionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{15}
}
func (m *SessionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionData.Merge(dst, src)
}
func (m *SessionData) XXX_Size() int {
	return m.Size()
}
func (m *SessionData) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionData.DiscardUnknown(m)
}

var xxx_messageInfo_SessionData proto.InternalMessageInfo

// SessionLeave is emitted to report that a user left the session
type SessionLeave struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// User is a common user event metadata
	UserMetadata `protobuf:"bytes,2,opt,name=User,embedded=User" json:""`
	// SessionMetadata is a common event session metadata
	SessionMetadata `protobuf:"bytes,3,opt,name=Session,embedded=Session" json:""`
	// ServerMetadata is a common server metadata
	ServerMetadata `protobuf:"bytes,4,opt,name=Server,embedded=Server" json:""`
	// ConnectionMetadata holds information about the connection
	ConnectionMetadata   `protobuf:"bytes,5,opt,name=Connection,embedded=Connection" json:""`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionLeave) Reset()         { *m = SessionLeave{} }
func (m *SessionLeave) String() string { return proto.CompactTextString(m) }
func (*SessionLeave) ProtoMessage()    {}
func (*SessionLeave) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{16}
}
func (m *SessionLeave) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionLeave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionLeave.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionLeave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionLeave.Merge(dst, src)
}
func (m *SessionLeave) XXX_Size() int {
	return m.Size()
}
func (m *SessionLeave) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionLeave.DiscardUnknown(m)
}

var xxx_messageInfo_SessionLeave proto.InternalMessageInfo

// UserLogin records a successfull or failed user login event
type UserLogin struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// User is a common user event metadata
	UserMetadata `protobuf:"bytes,2,opt,name=User,embedded=User" json:""`
	// Status contains common command or operation status fields
	Status `protobuf:"bytes,3,opt,name=Status,embedded=Status" json:""`
	// Method is the event field indicating how the login was performed
	Method string `protobuf:"bytes,4,opt,name=Method,proto3" json:"method,omitempty"`
	// IdentityAttributes is a map of user attributes received from identity provider
	IdentityAttributes   *Struct  `protobuf:"bytes,5,opt,name=IdentityAttributes,casttype=Struct" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserLogin) Reset()         { *m = UserLogin{} }
func (m *UserLogin) String() string { return proto.CompactTextString(m) }
func (*UserLogin) ProtoMessage()    {}
func (*UserLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{17}
}
func (m *UserLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLogin.Merge(dst, src)
}
func (m *UserLogin) XXX_Size() int {
	return m.Size()
}
func (m *UserLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLogin.DiscardUnknown(m)
}

var xxx_messageInfo_UserLogin proto.InternalMessageInfo

// UserUpdate is emitted when the user is created or updated (upsert).
type UserUpdate struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// User is a common user event metadata
	UserMetadata `protobuf:"bytes,2,opt,name=User,embedded=User" json:""`
	// Roles is a list of roles for the user.
	Roles []string `protobuf:"bytes,3,rep,name=Roles" json:"roles"`
	// Connector is the connector used to create the user.
	Connector string `protobuf:"bytes,4,opt,name=Connector,proto3" json:"connector"`
	// Expires is when the user will expire.
	Expires              time.Time `protobuf:"bytes,5,opt,name=Expires,stdtime" json:"expires"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UserUpdate) Reset()         { *m = UserUpdate{} }
func (m *UserUpdate) String() string { return proto.CompactTextString(m) }
func (*UserUpdate) ProtoMessage()    {}
func (*UserUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{18}
}
func (m *UserUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserUpdate.Merge(dst, src)
}
func (m *UserUpdate) XXX_Size() int {
	return m.Size()
}
func (m *UserUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UserUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UserUpdate proto.InternalMessageInfo

// PortForward is emitted when a user requests port forwarding.
type PortForward struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// User is a common user event metadata
	UserMetadata `protobuf:"bytes,2,opt,name=User,embedded=User" json:""`
	// ConnectionMetadata holds information about the connection
	ConnectionMetadata `protobuf:"bytes,3,opt,name=Connection,embedded=Connection" json:""`
	// Status contains operation success or failure status
	Status `protobuf:"bytes,4,opt,name=Status,embedded=Status" json:""`
	// Addr is a target port forwarding address
	Addr                 string   `protobuf:"bytes,5,opt,name=Addr,proto3" json:"addr"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortForward) Reset()         { *m = PortForward{} }
func (m *PortForward) String() string { return proto.CompactTextString(m) }
func (*PortForward) ProtoMessage()    {}
func (*PortForward) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{19}
}
func (m *PortForward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortForward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PortForward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PortForward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortForward.Merge(dst, src)
}
func (m *PortForward) XXX_Size() int {
	return m.Size()
}
func (m *PortForward) XXX_DiscardUnknown() {
	xxx_messageInfo_PortForward.DiscardUnknown(m)
}

var xxx_messageInfo_PortForward proto.InternalMessageInfo

// Subsystem is emitted when a user requests a new subsystem.
type Subsystem struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// User is a common user event metadata
	UserMetadata `protobuf:"bytes,2,opt,name=User,embedded=User" json:""`
	// ConnectionMetadata holds information about the connection
	ConnectionMetadata `protobuf:"bytes,3,opt,name=Connection,embedded=Connection" json:""`
	// Name is a subsystem name
	Name string `protobuf:"bytes,4,opt,name=Name,proto3" json:"name"`
	// Error contains error in case of unsucessfull attempt
	Error                string   `protobuf:"bytes,5,opt,name=Error,proto3" json:"exitError"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subsystem) Reset()         { *m = Subsystem{} }
func (m *Subsystem) String() string { return proto.CompactTextString(m) }
func (*Subsystem) ProtoMessage()    {}
func (*Subsystem) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{20}
}
func (m *Subsystem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subsystem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subsystem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Subsystem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subsystem.Merge(dst, src)
}
func (m *Subsystem) XXX_Size() int {
	return m.Size()
}
func (m *Subsystem) XXX_DiscardUnknown() {
	xxx_messageInfo_Subsystem.DiscardUnknown(m)
}

var xxx_messageInfo_Subsystem proto.InternalMessageInfo

// ClientDisconnect is emitted when client is disconnected
// by the server due to inactivity or any other reason
type ClientDisconnect struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// User is a common user event metadata
	UserMetadata `protobuf:"bytes,2,opt,name=User,embedded=User" json:""`
	// ConnectionMetadata holds information about the connection
	ConnectionMetadata `protobuf:"bytes,3,opt,name=Connection,embedded=Connection" json:""`
	// Reason is a field that specifies reason for event, e.g. in disconnect
	// event it explains why server disconnected the client
	Reason               string   `protobuf:"bytes,4,opt,name=Reason,proto3" json:"reason"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientDisconnect) Reset()         { *m = ClientDisconnect{} }
func (m *ClientDisconnect) String() string { return proto.CompactTextString(m) }
func (*ClientDisconnect) ProtoMessage()    {}
func (*ClientDisconnect) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{21}
}
func (m *ClientDisconnect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientDisconnect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientDisconnect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientDisconnect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientDisconnect.Merge(dst, src)
}
func (m *ClientDisconnect) XXX_Size() int {
	return m.Size()
}
func (m *ClientDisconnect) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientDisconnect.DiscardUnknown(m)
}

var xxx_messageInfo_ClientDisconnect proto.InternalMessageInfo

// AuthAttempt is emitted upon a failed or successfull authentication attempt.
type AuthAttempt struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// User is a common user event metadata
	UserMetadata `protobuf:"bytes,2,opt,name=User,embedded=User" json:""`
	// ConnectionMetadata holds information about the connection
	ConnectionMetadata `protobuf:"bytes,3,opt,name=Connection,embedded=Connection" json:""`
	// Status contains common command or operation status fields
	Status               `protobuf:"bytes,4,opt,name=Status,embedded=Status" json:""`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthAttempt) Reset()         { *m = AuthAttempt{} }
func (m *AuthAttempt) String() string { return proto.CompactTextString(m) }
func (*AuthAttempt) ProtoMessage()    {}
func (*AuthAttempt) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{22}
}
func (m *AuthAttempt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthAttempt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthAttempt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AuthAttempt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthAttempt.Merge(dst, src)
}
func (m *AuthAttempt) XXX_Size() int {
	return m.Size()
}
func (m *AuthAttempt) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthAttempt.DiscardUnknown(m)
}

var xxx_messageInfo_AuthAttempt proto.InternalMessageInfo

// OneOf is a union of one of audit events submitted to the auth service
type OneOf struct {
	// Event is one of the audit events
	//
	// Types that are valid to be assigned to Event:
	//	*OneOf_UserLogin
	//	*OneOf_UserUpdate
	//	*OneOf_SessionStart
	//	*OneOf_SessionJoin
	//	*OneOf_SessionPrint
	//	*OneOf_Resize
	//	*OneOf_SessionEnd
	//	*OneOf_SessionCommand
	//	*OneOf_SessionDisk
	//	*OneOf_SessionNetwork
	//	*OneOf_SessionData
	//	*OneOf_SessionLeave
	//	*OneOf_PortForward
	//	*OneOf_Subsystem
	//	*OneOf_ClientDisconnect
	//	*OneOf_AuthAttempt
	Event                isOneOf_Event `protobuf_oneof:"Event"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OneOf) Reset()         { *m = OneOf{} }
func (m *OneOf) String() string { return proto.CompactTextString(m) }
func (*OneOf) ProtoMessage()    {}
func (*OneOf) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{23}
}
func (m *OneOf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OneOf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OneOf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OneOf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneOf.Merge(dst, src)
}
func (m *OneOf) XXX_Size() int {
	return m.Size()
}
func (m *OneOf) XXX_DiscardUnknown() {
	xxx_messageInfo_OneOf.DiscardUnknown(m)
}

var xxx_messageInfo_OneOf proto.InternalMessageInfo

type isOneOf_Event interface {
	isOneOf_Event()
	MarshalTo([]byte) (int, error)
	Size() int
}

type OneOf_UserLogin struct {
	UserLogin *UserLogin `protobuf:"bytes,1,opt,name=UserLogin,oneof"`
}
type OneOf_UserUpdate struct {
	UserUpdate *UserUpdate `protobuf:"bytes,2,opt,name=UserUpdate,oneof"`
}
type OneOf_SessionStart struct {
	SessionStart *SessionStart `protobuf:"bytes,3,opt,name=SessionStart,oneof"`
}
type OneOf_SessionJoin struct {
	SessionJoin *SessionJoin `protobuf:"bytes,4,opt,name=SessionJoin,oneof"`
}
type OneOf_SessionPrint struct {
	SessionPrint *SessionPrint `protobuf:"bytes,5,opt,name=SessionPrint,oneof"`
}
type OneOf_Resize struct {
	Resize *Resize `protobuf:"bytes,6,opt,name=Resize,oneof"`
}
type OneOf_SessionEnd struct {
	SessionEnd *SessionEnd `protobuf:"bytes,7,opt,name=SessionEnd,oneof"`
}
type OneOf_SessionCommand struct {
	SessionCommand *SessionCommand `protobuf:"bytes,8,opt,name=SessionCommand,oneof"`
}
type OneOf_SessionDisk struct {
	SessionDisk *SessionDisk `protobuf:"bytes,9,opt,name=SessionDisk,oneof"`
}
type OneOf_SessionNetwork struct {
	SessionNetwork *SessionNetwork `protobuf:"bytes,10,opt,name=SessionNetwork,oneof"`
}
type OneOf_SessionData struct {
	SessionData *SessionData `protobuf:"bytes,11,opt,name=SessionData,oneof"`
}
type OneOf_SessionLeave struct {
	SessionLeave *SessionLeave `protobuf:"bytes,12,opt,name=SessionLeave,oneof"`
}
type OneOf_PortForward struct {
	PortForward *PortForward `protobuf:"bytes,13,opt,name=PortForward,oneof"`
}
type OneOf_Subsystem struct {
	Subsystem *Subsystem `protobuf:"bytes,14,opt,name=Subsystem,oneof"`
}
type OneOf_ClientDisconnect struct {
	ClientDisconnect *ClientDisconnect `protobuf:"bytes,15,opt,name=ClientDisconnect,oneof"`
}
type OneOf_AuthAttempt struct {
	AuthAttempt *AuthAttempt `protobuf:"bytes,16,opt,name=AuthAttempt,oneof"`
}

func (*OneOf_UserLogin) isOneOf_Event()        {}
func (*OneOf_UserUpdate) isOneOf_Event()       {}
func (*OneOf_SessionStart) isOneOf_Event()     {}
func (*OneOf_SessionJoin) isOneOf_Event()      {}
func (*OneOf_SessionPrint) isOneOf_Event()     {}
func (*OneOf_Resize) isOneOf_Event()           {}
func (*OneOf_SessionEnd) isOneOf_Event()       {}
func (*OneOf_SessionCommand) isOneOf_Event()   {}
func (*OneOf_SessionDisk) isOneOf_Event()      {}
func (*OneOf_SessionNetwork) isOneOf_Event()   {}
func (*OneOf_SessionData) isOneOf_Event()      {}
func (*OneOf_SessionLeave) isOneOf_Event()     {}
func (*OneOf_PortForward) isOneOf_Event()      {}
func (*OneOf_Subsystem) isOneOf_Event()        {}
func (*OneOf_ClientDisconnect) isOneOf_Event() {}
func (*OneOf_AuthAttempt) isOneOf_Event()      {}

func (m *OneOf) GetEvent() isOneOf_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *OneOf) GetUserLogin() *UserLogin {
	if x, ok := m.GetEvent().(*OneOf_UserLogin); ok {
		return x.UserLogin
	}
	return nil
}

func (m *OneOf) GetUserUpdate() *UserUpdate {
	if x, ok := m.GetEvent().(*OneOf_UserUpdate); ok {
		return x.UserUpdate
	}
	return nil
}

func (m *OneOf) GetSessionStart() *SessionStart {
	if x, ok := m.GetEvent().(*OneOf_SessionStart); ok {
		return x.SessionStart
	}
	return nil
}

func (m *OneOf) GetSessionJoin() *SessionJoin {
	if x, ok := m.GetEvent().(*OneOf_SessionJoin); ok {
		return x.SessionJoin
	}
	return nil
}

func (m *OneOf) GetSessionPrint() *SessionPrint {
	if x, ok := m.GetEvent().(*OneOf_SessionPrint); ok {
		return x.SessionPrint
	}
	return nil
}

func (m *OneOf) GetResize() *Resize {
	if x, ok := m.GetEvent().(*OneOf_Resize); ok {
		return x.Resize
	}
	return nil
}

func (m *OneOf) GetSessionEnd() *SessionEnd {
	if x, ok := m.GetEvent().(*OneOf_SessionEnd); ok {
		return x.SessionEnd
	}
	return nil
}

func (m *OneOf) GetSessionCommand() *SessionCommand {
	if x, ok := m.GetEvent().(*OneOf_SessionCommand); ok {
		return x.SessionCommand
	}
	return nil
}

func (m *OneOf) GetSessionDisk() *SessionDisk {
	if x, ok := m.GetEvent().(*OneOf_SessionDisk); ok {
		return x.SessionDisk
	}
	return nil
}

func (m *OneOf) GetSessionNetwork() *SessionNetwork {
	if x, ok := m.GetEvent().(*OneOf_SessionNetwork); ok {
		return x.SessionNetwork
	}
	return nil
}

func (m *OneOf) GetSessionData() *SessionData {
	if x, ok := m.GetEvent().(*OneOf_SessionData); ok {
		return x.SessionData
	}
	return nil
}

func (m *OneOf) GetSessionLeave() *SessionLeave {
	if x, ok := m.GetEvent().(*OneOf_SessionLeave); ok {
		return x.SessionLeave
	}
	return nil
}

func (m *OneOf) GetPortForward() *PortForward {
	if x, ok := m.GetEvent().(*OneOf_PortForward); ok {
		return x.PortForward
	}
	return nil
}

func (m *OneOf) GetSubsystem() *Subsystem {
	if x, ok := m.GetEvent().(*OneOf_Subsystem); ok {
		return x.Subsystem
	}
	return nil
}

func (m *OneOf) GetClientDisconnect() *ClientDisconnect {
	if x, ok := m.GetEvent().(*OneOf_ClientDisconnect); ok {
		return x.ClientDisconnect
	}
	return nil
}

func (m *OneOf) GetAuthAttempt() *AuthAttempt {
	if x, ok := m.GetEvent().(*OneOf_AuthAttempt); ok {
		return x.AuthAttempt
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OneOf) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OneOf_OneofMarshaler, _OneOf_OneofUnmarshaler, _OneOf_OneofSizer, []interface{}{
		(*OneOf_UserLogin)(nil),
		(*OneOf_UserUpdate)(nil),
		(*OneOf_SessionStart)(nil),
		(*OneOf_SessionJoin)(nil),
		(*OneOf_SessionPrint)(nil),
		(*OneOf_Resize)(nil),
		(*OneOf_SessionEnd)(nil),
		(*OneOf_SessionCommand)(nil),
		(*OneOf_SessionDisk)(nil),
		(*OneOf_SessionNetwork)(nil),
		(*OneOf_SessionData)(nil),
		(*OneOf_SessionLeave)(nil),
		(*OneOf_PortForward)(nil),
		(*OneOf_Subsystem)(nil),
		(*OneOf_ClientDisconnect)(nil),
		(*OneOf_AuthAttempt)(nil),
	}
}

func _OneOf_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OneOf)
	// Event
	switch x := m.Event.(type) {
	case *OneOf_UserLogin:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserLogin); err != nil {
			return err
		}
	case *OneOf_UserUpdate:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserUpdate); err != nil {
			return err
		}
	case *OneOf_SessionStart:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionStart); err != nil {
			return err
		}
	case *OneOf_SessionJoin:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionJoin); err != nil {
			return err
		}
	case *OneOf_SessionPrint:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionPrint); err != nil {
			return err
		}
	case *OneOf_Resize:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Resize); err != nil {
			return err
		}
	case *OneOf_SessionEnd:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionEnd); err != nil {
			return err
		}
	case *OneOf_SessionCommand:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionCommand); err != nil {
			return err
		}
	case *OneOf_SessionDisk:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionDisk); err != nil {
			return err
		}
	case *OneOf_SessionNetwork:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionNetwork); err != nil {
			return err
		}
	case *OneOf_SessionData:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionData); err != nil {
			return err
		}
	case *OneOf_SessionLeave:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionLeave); err != nil {
			return err
		}
	case *OneOf_PortForward:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PortForward); err != nil {
			return err
		}
	case *OneOf_Subsystem:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Subsystem); err != nil {
			return err
		}
	case *OneOf_ClientDisconnect:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClientDisconnect); err != nil {
			return err
		}
	case *OneOf_AuthAttempt:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AuthAttempt); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OneOf.Event has unexpected type %T", x)
	}
	return nil
}

func _OneOf_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OneOf)
	switch tag {
	case 1: // Event.UserLogin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserLogin)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_UserLogin{msg}
		return true, err
	case 2: // Event.UserUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserUpdate)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_UserUpdate{msg}
		return true, err
	case 3: // Event.SessionStart
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionStart)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_SessionStart{msg}
		return true, err
	case 4: // Event.SessionJoin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionJoin)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_SessionJoin{msg}
		return true, err
	case 5: // Event.SessionPrint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionPrint)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_SessionPrint{msg}
		return true, err
	case 6: // Event.Resize
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Resize)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_Resize{msg}
		return true, err
	case 7: // Event.SessionEnd
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionEnd)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_SessionEnd{msg}
		return true, err
	case 8: // Event.SessionCommand
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionCommand)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_SessionCommand{msg}
		return true, err
	case 9: // Event.SessionDisk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionDisk)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_SessionDisk{msg}
		return true, err
	case 10: // Event.SessionNetwork
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionNetwork)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_SessionNetwork{msg}
		return true, err
	case 11: // Event.SessionData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionData)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_SessionData{msg}
		return true, err
	case 12: // Event.SessionLeave
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionLeave)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_SessionLeave{msg}
		return true, err
	case 13: // Event.PortForward
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PortForward)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_PortForward{msg}
		return true, err
	case 14: // Event.Subsystem
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Subsystem)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_Subsystem{msg}
		return true, err
	case 15: // Event.ClientDisconnect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientDisconnect)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_ClientDisconnect{msg}
		return true, err
	case 16: // Event.AuthAttempt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AuthAttempt)
		err := b.DecodeMessage(msg)
		m.Event = &OneOf_AuthAttempt{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OneOf_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OneOf)
	// Event
	switch x := m.Event.(type) {
	case *OneOf_UserLogin:
		s := proto.Size(x.UserLogin)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_UserUpdate:
		s := proto.Size(x.UserUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_SessionStart:
		s := proto.Size(x.SessionStart)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_SessionJoin:
		s := proto.Size(x.SessionJoin)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_SessionPrint:
		s := proto.Size(x.SessionPrint)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_Resize:
		s := proto.Size(x.Resize)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_SessionEnd:
		s := proto.Size(x.SessionEnd)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_SessionCommand:
		s := proto.Size(x.SessionCommand)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_SessionDisk:
		s := proto.Size(x.SessionDisk)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_SessionNetwork:
		s := proto.Size(x.SessionNetwork)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_SessionData:
		s := proto.Size(x.SessionData)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_SessionLeave:
		s := proto.Size(x.SessionLeave)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_PortForward:
		s := proto.Size(x.PortForward)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_Subsystem:
		s := proto.Size(x.Subsystem)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_ClientDisconnect:
		s := proto.Size(x.ClientDisconnect)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneOf_AuthAttempt:
		s := proto.Size(x.AuthAttempt)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// StreamStatus reflects stream status
type StreamStatus struct {
	// UploadID represents upload ID
	UploadID string `protobuf:"bytes,1,opt,name=UploadID,proto3" json:"UploadID,omitempty"`
	// LastEventIndex updates last event index
	LastEventIndex       int64    `protobuf:"varint,2,opt,name=LastEventIndex,proto3" json:"LastEventIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamStatus) Reset()         { *m = StreamStatus{} }
func (m *StreamStatus) String() string { return proto.CompactTextString(m) }
func (*StreamStatus) ProtoMessage()    {}
func (*StreamStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_67b66012eb607ba3, []int{24}
}
func (m *StreamStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StreamStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamStatus.Merge(dst, src)
}
func (m *StreamStatus) XXX_Size() int {
	return m.Size()
}
func (m *StreamStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StreamStatus proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Metadata)(nil), "events.Metadata")
	proto.RegisterType((*SessionMetadata)(nil), "events.SessionMetadata")
	proto.RegisterType((*UserMetadata)(nil), "events.UserMetadata")
	proto.RegisterType((*ServerMetadata)(nil), "events.ServerMetadata")
	proto.RegisterMapType((map[string]string)(nil), "events.ServerMetadata.ServerLabelsEntry")
	proto.RegisterType((*ConnectionMetadata)(nil), "events.ConnectionMetadata")
	proto.RegisterType((*SessionStart)(nil), "events.SessionStart")
	proto.RegisterType((*SessionJoin)(nil), "events.SessionJoin")
	proto.RegisterType((*SessionPrint)(nil), "events.SessionPrint")
	proto.RegisterType((*Resize)(nil), "events.Resize")
	proto.RegisterType((*SessionEnd)(nil), "events.SessionEnd")
	proto.RegisterType((*BPFMetadata)(nil), "events.BPFMetadata")
	proto.RegisterType((*Status)(nil), "events.Status")
	proto.RegisterType((*SessionCommand)(nil), "events.SessionCommand")
	proto.RegisterType((*SessionDisk)(nil), "events.SessionDisk")
	proto.RegisterType((*SessionNetwork)(nil), "events.SessionNetwork")
	proto.RegisterType((*SessionData)(nil), "events.SessionData")
	proto.RegisterType((*SessionLeave)(nil), "events.SessionLeave")
	proto.RegisterType((*UserLogin)(nil), "events.UserLogin")
	proto.RegisterType((*UserUpdate)(nil), "events.UserUpdate")
	proto.RegisterType((*PortForward)(nil), "events.PortForward")
	proto.RegisterType((*Subsystem)(nil), "events.Subsystem")
	proto.RegisterType((*ClientDisconnect)(nil), "events.ClientDisconnect")
	proto.RegisterType((*AuthAttempt)(nil), "events.AuthAttempt")
	proto.RegisterType((*OneOf)(nil), "events.OneOf")
	proto.RegisterType((*StreamStatus)(nil), "events.StreamStatus")
}
func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Index))
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.ID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SessionID)))
		i += copy(dAtA[i:], m.SessionID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if len(m.Login) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Login)))
		i += copy(dAtA[i:], m.Login)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServerNamespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ServerNamespace)))
		i += copy(dAtA[i:], m.ServerNamespace)
	}
	if len(m.ServerID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ServerID)))
		i += copy(dAtA[i:], m.ServerID)
	}
	if len(m.ServerHostname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ServerHostname)))
		i += copy(dAtA[i:], m.ServerHostname)
	}
	if len(m.ServerLabels) > 0 {
		for k, _ := range m.ServerLabels {
			dAtA[i] = 0x22
			i++
			v := m.ServerLabels[k]
			mapSize := 1 + len(k) + sovEvents(uint64(len(k))) + 1 + len(v) + sovEvents(uint64(len(v)))
			i = encodeVarintEvents(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvents(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintEvents(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConnectionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LocalAddr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LocalAddr)))
		i += copy(dAtA[i:], m.LocalAddr)
	}
	if len(m.RemoteAddr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RemoteAddr)))
		i += copy(dAtA[i:], m.RemoteAddr)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n2, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.UserMetadata.Size()))
	n3, err := m.UserMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.SessionMetadata.Size()))
	n4, err := m.SessionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ServerMetadata.Size()))
	n5, err := m.ServerMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ConnectionMetadata.Size()))
	n6, err := m.ConnectionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.TerminalSize) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TerminalSize)))
		i += copy(dAtA[i:], m.TerminalSize)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionJoin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n7, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.UserMetadata.Size()))
	n8, err := m.UserMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.SessionMetadata.Size()))
	n9, err := m.SessionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ServerMetadata.Size()))
	n10, err := m.ServerMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ConnectionMetadata.Size()))
	n11, err := m.ConnectionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionPrint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionPrint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n12, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	if m.ChunkIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.ChunkIndex))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Bytes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Bytes))
	}
	if m.DelayMilliseconds != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.DelayMilliseconds))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Resize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n13, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.UserMetadata.Size()))
	n14, err := m.UserMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.SessionMetadata.Size()))
	n15, err := m.SessionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ConnectionMetadata.Size()))
	n16, err := m.ConnectionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ServerMetadata.Size()))
	n17, err := m.ServerMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	if len(m.TerminalSize) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TerminalSize)))
		i += copy(dAtA[i:], m.TerminalSize)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionEnd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n18, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.UserMetadata.Size()))
	n19, err := m.UserMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.SessionMetadata.Size()))
	n20, err := m.SessionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ConnectionMetadata.Size()))
	n21, err := m.ConnectionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ServerMetadata.Size()))
	n22, err := m.ServerMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	if m.EnhancedRecording {
		dAtA[i] = 0x30
		i++
		if m.EnhancedRecording {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Interactive {
		dAtA[i] = 0x38
		i++
		if m.Interactive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Participants) > 0 {
		for _, s := range m.Participants {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BPFMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BPFMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.PID))
	}
	if m.CgroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.CgroupID))
	}
	if len(m.Program) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Program)))
		i += copy(dAtA[i:], m.Program)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.UserMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.UserMessage)))
		i += copy(dAtA[i:], m.UserMessage)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n23, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.UserMetadata.Size()))
	n24, err := m.UserMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.SessionMetadata.Size()))
	n25, err := m.SessionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ServerMetadata.Size()))
	n26, err := m.ServerMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.BPFMetadata.Size()))
	n27, err := m.BPFMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	if m.PPID != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.PPID))
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Argv) > 0 {
		for _, s := range m.Argv {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.ReturnCode != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.ReturnCode))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionDisk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionDisk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n28, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.UserMetadata.Size()))
	n29, err := m.UserMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.SessionMetadata.Size()))
	n30, err := m.SessionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ServerMetadata.Size()))
	n31, err := m.ServerMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.BPFMetadata.Size()))
	n32, err := m.BPFMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n32
	if len(m.Path) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.Flags != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Flags))
	}
	if m.ReturnCode != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.ReturnCode))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionNetwork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionNetwork) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n33, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n33
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.UserMetadata.Size()))
	n34, err := m.UserMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n34
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.SessionMetadata.Size()))
	n35, err := m.SessionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n35
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ServerMetadata.Size()))
	n36, err := m.ServerMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n36
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.BPFMetadata.Size()))
	n37, err := m.BPFMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n37
	if len(m.SrcAddr) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SrcAddr)))
		i += copy(dAtA[i:], m.SrcAddr)
	}
	if len(m.DstAddr) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DstAddr)))
		i += copy(dAtA[i:], m.DstAddr)
	}
	if m.DstPort != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.DstPort))
	}
	if m.TCPVersion != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.TCPVersion))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n38, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n38
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.UserMetadata.Size()))
	n39, err := m.UserMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n39
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.SessionMetadata.Size()))
	n40, err := m.SessionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n40
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ServerMetadata.Size()))
	n41, err := m.ServerMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n41
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ConnectionMetadata.Size()))
	n42, err := m.ConnectionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n42
	if m.BytesTransmitted != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.BytesTransmitted))
	}
	if m.BytesReceived != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.BytesReceived))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionLeave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n43, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n43
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.UserMetadata.Size()))
	n44, err := m.UserMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n44
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.SessionMetadata.Size()))
	n45, err := m.SessionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n45
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ServerMetadata.Size()))
	n46, err := m.ServerMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n46
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ConnectionMetadata.Size()))
	n47, err := m.ConnectionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n47
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n48, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n48
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.UserMetadata.Size()))
	n49, err := m.UserMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n49
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Status.Size()))
	n50, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n50
	if len(m.Method) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if m.IdentityAttributes != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.IdentityAttributes.Size()))
		n51, err := m.IdentityAttributes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n52, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n52
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.UserMetadata.Size()))
	n53, err := m.UserMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n53
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Connector) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Connector)))
		i += copy(dAtA[i:], m.Connector)
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Expires)))
	n54, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Expires, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n54
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PortForward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortForward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n55, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n55
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.UserMetadata.Size()))
	n56, err := m.UserMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n56
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ConnectionMetadata.Size()))
	n57, err := m.ConnectionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n57
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Status.Size()))
	n58, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n58
	if len(m.Addr) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Subsystem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subsystem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n59, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n59
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.UserMetadata.Size()))
	n60, err := m.UserMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n60
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ConnectionMetadata.Size()))
	n61, err := m.ConnectionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n61
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientDisconnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientDisconnect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n62, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n62
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.UserMetadata.Size()))
	n63, err := m.UserMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n63
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ConnectionMetadata.Size()))
	n64, err := m.ConnectionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n64
	if len(m.Reason) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AuthAttempt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthAttempt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n65, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n65
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.UserMetadata.Size()))
	n66, err := m.UserMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n66
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ConnectionMetadata.Size()))
	n67, err := m.ConnectionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n67
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Status.Size()))
	n68, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n68
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OneOf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OneOf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		nn69, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn69
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OneOf_UserLogin) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserLogin != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.UserLogin.Size()))
		n70, err := m.UserLogin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	return i, nil
}
func (m *OneOf_UserUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserUpdate != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.UserUpdate.Size()))
		n71, err := m.UserUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	return i, nil
}
func (m *OneOf_SessionStart) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SessionStart != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.SessionStart.Size()))
		n72, err := m.SessionStart.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}
func (m *OneOf_SessionJoin) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SessionJoin != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.SessionJoin.Size()))
		n73, err := m.SessionJoin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}
func (m *OneOf_SessionPrint) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SessionPrint != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.SessionPrint.Size()))
		n74, err := m.SessionPrint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}
func (m *OneOf_Resize) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Resize != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Resize.Size()))
		n75, err := m.Resize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}
func (m *OneOf_SessionEnd) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SessionEnd != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.SessionEnd.Size()))
		n76, err := m.SessionEnd.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}
func (m *OneOf_SessionCommand) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SessionCommand != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.SessionCommand.Size()))
		n77, err := m.SessionCommand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}
func (m *OneOf_SessionDisk) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SessionDisk != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.SessionDisk.Size()))
		n78, err := m.SessionDisk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}
func (m *OneOf_SessionNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SessionNetwork != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.SessionNetwork.Size()))
		n79, err := m.SessionNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	return i, nil
}
func (m *OneOf_SessionData) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SessionData != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.SessionData.Size()))
		n80, err := m.SessionData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}
func (m *OneOf_SessionLeave) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SessionLeave != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.SessionLeave.Size()))
		n81, err := m.SessionLeave.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}
func (m *OneOf_PortForward) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PortForward != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.PortForward.Size()))
		n82, err := m.PortForward.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}
func (m *OneOf_Subsystem) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Subsystem != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Subsystem.Size()))
		n83, err := m.Subsystem.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}
func (m *OneOf_ClientDisconnect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClientDisconnect != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.ClientDisconnect.Size()))
		n84, err := m.ClientDisconnect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}
func (m *OneOf_AuthAttempt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AuthAttempt != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.AuthAttempt.Size()))
		n85, err := m.AuthAttempt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	return i, nil
}
func (m *StreamStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UploadID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.UploadID)))
		i += copy(dAtA[i:], m.UploadID)
	}
	if m.LastEventIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.LastEventIndex))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Metadata) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovEvents(uint64(m.Index))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovEvents(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Login)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServerNamespace)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ServerHostname)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.ServerLabels) > 0 {
		for k, v := range m.ServerLabels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEvents(uint64(len(k))) + 1 + len(v) + sovEvents(uint64(len(v)))
			n += mapEntrySize + 1 + sovEvents(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectionMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.LocalAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RemoteAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionStart) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.UserMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.SessionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ServerMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ConnectionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.TerminalSize)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionJoin) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.UserMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.SessionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ServerMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ConnectionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionPrint) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.ChunkIndex != 0 {
		n += 1 + sovEvents(uint64(m.ChunkIndex))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Bytes != 0 {
		n += 1 + sovEvents(uint64(m.Bytes))
	}
	if m.DelayMilliseconds != 0 {
		n += 1 + sovEvents(uint64(m.DelayMilliseconds))
	}
	if m.Offset != 0 {
		n += 1 + sovEvents(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Resize) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.UserMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.SessionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ConnectionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ServerMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.TerminalSize)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionEnd) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.UserMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.SessionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ConnectionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ServerMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.EnhancedRecording {
		n += 2
	}
	if m.Interactive {
		n += 2
	}
	if len(m.Participants) > 0 {
		for _, s := range m.Participants {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BPFMetadata) Size() (n int) {
	var l int
	_ = l
	if m.PID != 0 {
		n += 1 + sovEvents(uint64(m.PID))
	}
	if m.CgroupID != 0 {
		n += 1 + sovEvents(uint64(m.CgroupID))
	}
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.UserMessage)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionCommand) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.UserMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.SessionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ServerMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.BPFMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.PPID != 0 {
		n += 1 + sovEvents(uint64(m.PPID))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Argv) > 0 {
		for _, s := range m.Argv {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if m.ReturnCode != 0 {
		n += 1 + sovEvents(uint64(m.ReturnCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionDisk) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.UserMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.SessionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ServerMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.BPFMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Flags != 0 {
		n += 1 + sovEvents(uint64(m.Flags))
	}
	if m.ReturnCode != 0 {
		n += 1 + sovEvents(uint64(m.ReturnCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionNetwork) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.UserMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.SessionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ServerMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.BPFMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.SrcAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DstAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.DstPort != 0 {
		n += 1 + sovEvents(uint64(m.DstPort))
	}
	if m.TCPVersion != 0 {
		n += 1 + sovEvents(uint64(m.TCPVersion))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionData) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.UserMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.SessionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ServerMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ConnectionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.BytesTransmitted != 0 {
		n += 1 + sovEvents(uint64(m.BytesTransmitted))
	}
	if m.BytesReceived != 0 {
		n += 1 + sovEvents(uint64(m.BytesReceived))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionLeave) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.UserMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.SessionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ServerMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ConnectionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserLogin) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.UserMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.IdentityAttributes != nil {
		l = m.IdentityAttributes.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserUpdate) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.UserMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = len(m.Connector)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Expires)
	n += 1 + l + sovEvents(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PortForward) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.UserMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ConnectionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Subsystem) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.UserMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ConnectionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientDisconnect) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.UserMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ConnectionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthAttempt) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.UserMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ConnectionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OneOf) Size() (n int) {
	var l int
	_ = l
	if m.Event != nil {
		n += m.Event.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OneOf_UserLogin) Size() (n int) {
	var l int
	_ = l
	if m.UserLogin != nil {
		l = m.UserLogin.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *OneOf_UserUpdate) Size() (n int) {
	var l int
	_ = l
	if m.UserUpdate != nil {
		l = m.UserUpdate.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *OneOf_SessionStart) Size() (n int) {
	var l int
	_ = l
	if m.SessionStart != nil {
		l = m.SessionStart.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *OneOf_SessionJoin) Size() (n int) {
	var l int
	_ = l
	if m.SessionJoin != nil {
		l = m.SessionJoin.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *OneOf_SessionPrint) Size() (n int) {
	var l int
	_ = l
	if m.SessionPrint != nil {
		l = m.SessionPrint.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *OneOf_Resize) Size() (n int) {
	var l int
	_ = l
	if m.Resize != nil {
		l = m.Resize.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *OneOf_SessionEnd) Size() (n int) {
	var l int
	_ = l
	if m.SessionEnd != nil {
		l = m.SessionEnd.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *OneOf_SessionCommand) Size() (n int) {
	var l int
	_ = l
	if m.SessionCommand != nil {
		l = m.SessionCommand.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *OneOf_SessionDisk) Size() (n int) {
	var l int
	_ = l
	if m.SessionDisk != nil {
		l = m.SessionDisk.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *OneOf_SessionNetwork) Size() (n int) {
	var l int
	_ = l
	if m.SessionNetwork != nil {
		l = m.SessionNetwork.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *OneOf_SessionData) Size() (n int) {
	var l int
	_ = l
	if m.SessionData != nil {
		l = m.SessionData.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *OneOf_SessionLeave) Size() (n int) {
	var l int
	_ = l
	if m.SessionLeave != nil {
		l = m.SessionLeave.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *OneOf_PortForward) Size() (n int) {
	var l int
	_ = l
	if m.PortForward != nil {
		l = m.PortForward.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *OneOf_Subsystem) Size() (n int) {
	var l int
	_ = l
	if m.Subsystem != nil {
		l = m.Subsystem.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *OneOf_ClientDisconnect) Size() (n int) {
	var l int
	_ = l
	if m.ClientDisconnect != nil {
		l = m.ClientDisconnect.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *OneOf_AuthAttempt) Size() (n int) {
	var l int
	_ = l
	if m.AuthAttempt != nil {
		l = m.AuthAttempt.Size()
		n += 2 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *StreamStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.UploadID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.LastEventIndex != 0 {
		n += 1 + sovEvents(uint64(m.LastEventIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Login", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Login = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerLabels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerLabels == nil {
				m.ServerLabels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEvents
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthEvents
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEvents(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEvents
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ServerLabels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServerMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionJoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServerMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionPrint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionPrint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionPrint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkIndex", wireType)
			}
			m.ChunkIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkIndex |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayMilliseconds", wireType)
			}
			m.DelayMilliseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelayMilliseconds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServerMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServerMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnhancedRecording", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnhancedRecording = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interactive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Interactive = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BPFMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BPFMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BPFMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PID", wireType)
			}
			m.PID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupID", wireType)
			}
			m.CgroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CgroupID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServerMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BPFMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BPFMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PPID", wireType)
			}
			m.PPID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PPID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Argv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Argv = append(m.Argv, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnCode", wireType)
			}
			m.ReturnCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionDisk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionDisk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionDisk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServerMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BPFMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BPFMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnCode", wireType)
			}
			m.ReturnCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionNetwork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionNetwork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionNetwork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServerMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BPFMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BPFMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPort", wireType)
			}
			m.DstPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCPVersion", wireType)
			}
			m.TCPVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TCPVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServerMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesTransmitted", wireType)
			}
			m.BytesTransmitted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesTransmitted |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesReceived", wireType)
			}
			m.BytesReceived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesReceived |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServerMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityAttributes == nil {
				m.IdentityAttributes = &Struct{}
			}
			if err := m.IdentityAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Connector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Expires, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortForward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortForward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortForward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subsystem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subsystem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subsystem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientDisconnect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientDisconnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientDisconnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthAttempt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthAttempt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthAttempt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OneOf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneOf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneOf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLogin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UserLogin{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_UserLogin{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UserUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_UserUpdate{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionStart{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_SessionStart{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionJoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionJoin{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_SessionJoin{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionPrint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionPrint{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_SessionPrint{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Resize{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_Resize{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionEnd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_SessionEnd{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionCommand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_SessionCommand{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionDisk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionDisk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_SessionDisk{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionNetwork{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_SessionNetwork{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_SessionData{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionLeave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionLeave{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_SessionLeave{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortForward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PortForward{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_PortForward{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsystem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Subsystem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_Subsystem{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientDisconnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClientDisconnect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_ClientDisconnect{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthAttempt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthAttempt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OneOf_AuthAttempt{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UploadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastEventIndex", wireType)
			}
			m.LastEventIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastEventIndex |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("events.proto", fileDescriptor_events_67b66012eb607ba3) }

var fileDescriptor_events_67b66012eb607ba3 = []byte{
	// 1980 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcf, 0x6f, 0x1c, 0x49,
	0xf5, 0x9f, 0xdf, 0x3f, 0x6a, 0x26, 0x8e, 0x5d, 0xf6, 0x6e, 0x26, 0x56, 0xd6, 0xed, 0x6f, 0x7f,
	0xb5, 0x91, 0x57, 0x1b, 0x1c, 0xc5, 0x6b, 0xad, 0x97, 0x15, 0xd2, 0xc6, 0xe3, 0xb1, 0x65, 0x23,
	0x27, 0xb1, 0x6a, 0x1c, 0xe0, 0x16, 0x95, 0xa7, 0xcb, 0xe3, 0x56, 0xa6, 0xbb, 0x47, 0xd5, 0x35,
	0x5e, 0x3b, 0x37, 0xc4, 0x81, 0xcb, 0x1e, 0x90, 0xb8, 0xc0, 0x89, 0x13, 0x07, 0x24, 0xfe, 0x0b,
	0x2e, 0x16, 0x5c, 0x72, 0xe0, 0x4a, 0x03, 0xe1, 0xd6, 0x67, 0x90, 0x10, 0x12, 0x12, 0xaa, 0x57,
	0xd5, 0xd3, 0xd5, 0x6d, 0x0b, 0xd8, 0xf5, 0x21, 0x8a, 0xf0, 0x6d, 0xfa, 0xf3, 0x79, 0xaf, 0xaa,
	0xde, 0x8f, 0xaa, 0x7a, 0xf5, 0x06, 0xb5, 0xd9, 0x29, 0xf3, 0x45, 0xb8, 0x3a, 0xe6, 0x81, 0x08,
	0x70, 0x4d, 0x7d, 0x2d, 0x2e, 0x0c, 0x83, 0x61, 0x00, 0xd0, 0x43, 0xf9, 0x4b, 0xb1, 0x8b, 0xd6,
	0x30, 0x08, 0x86, 0x23, 0xf6, 0x10, 0xbe, 0x8e, 0x26, 0xc7, 0x0f, 0x85, 0xeb, 0xb1, 0x50, 0x50,
	0x6f, 0xac, 0x05, 0xee, 0xe5, 0x05, 0x42, 0xc1, 0x27, 0x03, 0xa1, 0x58, 0xfb, 0xf7, 0x45, 0xd4,
	0x78, 0xc2, 0x04, 0x75, 0xa8, 0xa0, 0xf8, 0x1e, 0xaa, 0xee, 0xf9, 0x0e, 0x3b, 0xeb, 0x14, 0x97,
	0x8b, 0x2b, 0xe5, 0x6e, 0x2d, 0x8e, 0xac, 0x12, 0x73, 0x89, 0x02, 0xf1, 0x07, 0xa8, 0x72, 0x78,
	0x3e, 0x66, 0x9d, 0xd2, 0x72, 0x71, 0xa5, 0xd9, 0x6d, 0xc6, 0x91, 0x55, 0x85, 0x95, 0x11, 0x80,
	0xf1, 0xff, 0xa1, 0xd2, 0x5e, 0xaf, 0x53, 0x06, 0x72, 0x2e, 0x8e, 0xac, 0x5b, 0x13, 0xd7, 0x79,
	0x10, 0x78, 0xae, 0x60, 0xde, 0x58, 0x9c, 0x93, 0xd2, 0x5e, 0x0f, 0xdf, 0x47, 0x95, 0xad, 0xc0,
	0x61, 0x9d, 0x0a, 0x08, 0xe1, 0x38, 0xb2, 0x66, 0x06, 0x81, 0xc3, 0x0c, 0x29, 0xe0, 0xf1, 0x63,
	0x54, 0x39, 0x74, 0x3d, 0xd6, 0xa9, 0x2e, 0x17, 0x57, 0x5a, 0x6b, 0x8b, 0xab, 0xca, 0x82, 0xd5,
	0xc4, 0x82, 0xd5, 0xc3, 0xc4, 0xc4, 0xee, 0xec, 0x45, 0x64, 0x15, 0xe2, 0xc8, 0xaa, 0x48, 0xab,
	0x7f, 0xf2, 0x47, 0xab, 0x48, 0x40, 0xd3, 0xfe, 0x0c, 0xdd, 0xee, 0xb3, 0x30, 0x74, 0x03, 0x7f,
	0x6a, 0xdc, 0x87, 0xa8, 0xa9, 0xa1, 0xbd, 0x1e, 0x18, 0xd8, 0xec, 0xd6, 0xe3, 0xc8, 0x2a, 0x87,
	0xae, 0x43, 0x52, 0xc6, 0xfe, 0x3e, 0x6a, 0x3f, 0x0f, 0x19, 0x37, 0x7c, 0x52, 0x91, 0xdf, 0x5a,
	0xa3, 0x21, 0xe7, 0x9a, 0x84, 0x8c, 0x13, 0x40, 0xf1, 0x47, 0xa8, 0xba, 0x1f, 0x0c, 0x5d, 0x5f,
	0x3b, 0x65, 0x3e, 0x8e, 0xac, 0xdb, 0x23, 0x09, 0x18, 0x36, 0x29, 0x09, 0xfb, 0x6f, 0x25, 0x34,
	0xd3, 0x67, 0xfc, 0xd4, 0x18, 0x7b, 0x53, 0xae, 0x52, 0x22, 0x4f, 0xa9, 0xc7, 0xc2, 0x31, 0x1d,
	0x30, 0x3d, 0xcd, 0x9d, 0x38, 0xb2, 0xe6, 0xfd, 0x04, 0x34, 0xc6, 0xca, 0xcb, 0xe3, 0x8f, 0x50,
	0x43, 0x41, 0x7b, 0x3d, 0xbd, 0x86, 0x5b, 0x71, 0x64, 0x35, 0x43, 0xc0, 0x5e, 0xb8, 0x0e, 0x99,
	0xd2, 0x78, 0x3b, 0x99, 0x7f, 0x37, 0x08, 0x85, 0x1c, 0x5c, 0x07, 0xeb, 0x83, 0x38, 0xb2, 0xee,
	0x6a, 0x85, 0x13, 0x4d, 0x19, 0x53, 0xe6, 0x94, 0xb0, 0x87, 0xda, 0x0a, 0xd9, 0xa7, 0x47, 0x6c,
	0x14, 0x76, 0x2a, 0xcb, 0xe5, 0x95, 0xd6, 0xda, 0xca, 0xaa, 0xce, 0xd9, 0xac, 0x89, 0xab, 0xa6,
	0xe8, 0xb6, 0x2f, 0xf8, 0x79, 0xd7, 0xd2, 0x21, 0xbb, 0xa3, 0xa7, 0x1c, 0x01, 0x67, 0x4c, 0x98,
	0x19, 0x7e, 0xf1, 0x0b, 0x34, 0x77, 0x69, 0x0c, 0x3c, 0x8b, 0xca, 0x2f, 0xd9, 0xb9, 0x72, 0x16,
	0x91, 0x3f, 0xf1, 0x02, 0xaa, 0x9e, 0xd2, 0xd1, 0x44, 0x67, 0x27, 0x51, 0x1f, 0x9f, 0x97, 0x3e,
	0x2b, 0xda, 0x3f, 0x2e, 0x22, 0xbc, 0x15, 0xf8, 0x3e, 0x1b, 0x08, 0x33, 0x1d, 0x3e, 0x45, 0xcd,
	0xfd, 0x60, 0x40, 0x47, 0x9b, 0x8e, 0x93, 0x04, 0xb7, 0x13, 0x47, 0xd6, 0x02, 0x75, 0x1c, 0xbe,
	0x3a, 0x92, 0x8c, 0xb1, 0xa4, 0x54, 0x14, 0x7f, 0x1b, 0x21, 0xc2, 0xbc, 0x40, 0x30, 0x50, 0x54,
	0x2e, 0xbf, 0x1b, 0x47, 0xd6, 0x7b, 0xa0, 0xc8, 0x81, 0x32, 0x34, 0x0d, 0x61, 0xfb, 0x47, 0x65,
	0xe9, 0x3a, 0x48, 0xb4, 0xbe, 0xa0, 0x5c, 0xe0, 0xcf, 0xd3, 0xbd, 0x07, 0x4b, 0x68, 0xad, 0xcd,
	0x26, 0x6e, 0x4c, 0xf0, 0x6e, 0x5b, 0xba, 0xeb, 0x75, 0x64, 0x15, 0xe3, 0xc8, 0x2a, 0x90, 0x86,
	0xb1, 0x7e, 0x95, 0x97, 0x25, 0xd0, 0x5b, 0x48, 0xf4, 0xcc, 0xdc, 0xcd, 0xe9, 0xaa, 0x8c, 0xfd,
	0x02, 0xd5, 0xf5, 0x1a, 0x20, 0xfc, 0xad, 0xb5, 0x3b, 0x69, 0xe4, 0x32, 0x1b, 0x26, 0xa7, 0x9d,
	0x68, 0xe1, 0xef, 0xa0, 0x9a, 0x0a, 0x08, 0x6c, 0xe3, 0xd6, 0xda, 0xfb, 0x57, 0x47, 0x3e, 0xa7,
	0xae, 0x75, 0xf0, 0x2e, 0x42, 0x69, 0x30, 0xa6, 0x1b, 0x5c, 0x8f, 0x70, 0x39, 0x4c, 0xb9, 0x51,
	0x0c, 0x5d, 0xfc, 0x29, 0x6a, 0x1f, 0x32, 0xee, 0xb9, 0x3e, 0x1d, 0xf5, 0xdd, 0x57, 0xac, 0x53,
	0x4b, 0x0f, 0x95, 0xd0, 0x7d, 0x65, 0xc6, 0x20, 0x23, 0x67, 0xff, 0xb6, 0x84, 0x5a, 0xda, 0x96,
	0xef, 0x06, 0xae, 0x7f, 0x13, 0x84, 0x6b, 0x04, 0xc1, 0xfe, 0xaa, 0x34, 0x4d, 0xe9, 0x03, 0xee,
	0xfa, 0xd7, 0x4b, 0xe9, 0xfb, 0x08, 0x6d, 0x9d, 0x4c, 0xfc, 0x97, 0xea, 0x0e, 0x2a, 0xa5, 0x77,
	0xd0, 0xc0, 0x25, 0x06, 0x23, 0x2f, 0xa2, 0x9e, 0x1c, 0x5f, 0xba, 0xae, 0xdd, 0x6d, 0x5e, 0xa8,
	0x91, 0x8a, 0xdf, 0x22, 0x00, 0x63, 0x0b, 0x55, 0xbb, 0xe7, 0x82, 0x85, 0xe0, 0x9a, 0xb2, 0xba,
	0xa8, 0x8e, 0x24, 0x40, 0x14, 0x8e, 0xd7, 0xd1, 0x5c, 0x8f, 0x8d, 0xe8, 0xf9, 0x13, 0x77, 0x34,
	0x72, 0x43, 0x36, 0x08, 0x7c, 0x27, 0x04, 0x2f, 0xe8, 0xe9, 0xbc, 0x90, 0x5c, 0x16, 0xc0, 0x36,
	0xaa, 0x3d, 0x3b, 0x3e, 0x0e, 0x99, 0x80, 0x4c, 0x2b, 0x77, 0x51, 0x1c, 0x59, 0xb5, 0x00, 0x10,
	0xa2, 0x19, 0xfb, 0x9f, 0x25, 0x54, 0x23, 0x4c, 0xa6, 0xdf, 0xbb, 0x99, 0x56, 0xd9, 0xc4, 0xa8,
	0x5c, 0x63, 0x77, 0xa6, 0x09, 0x5a, 0xfd, 0x06, 0x09, 0xfa, 0x4d, 0xf7, 0xf6, 0xdf, 0xcb, 0x08,
	0x69, 0x5b, 0xb6, 0x7d, 0xe7, 0x26, 0x06, 0xd7, 0x89, 0x41, 0x0f, 0xcd, 0x6d, 0xfb, 0x27, 0xd4,
	0x1f, 0x30, 0x87, 0xb0, 0x41, 0xc0, 0x1d, 0xd7, 0x1f, 0x42, 0x20, 0x1a, 0xdd, 0xf7, 0xe3, 0xc8,
	0xc2, 0x4c, 0x93, 0x2f, 0x78, 0xc2, 0x92, 0xcb, 0x0a, 0xf8, 0x11, 0x6a, 0xed, 0xf9, 0x82, 0x71,
	0x3a, 0x10, 0xee, 0x29, 0xeb, 0xd4, 0x41, 0xff, 0x76, 0x1c, 0x59, 0x2d, 0x37, 0x85, 0x89, 0x29,
	0x83, 0xd7, 0x51, 0xfb, 0x80, 0x72, 0xe1, 0x0e, 0xdc, 0x31, 0xf5, 0x45, 0xd8, 0x69, 0x2c, 0x97,
	0x57, 0x9a, 0xdd, 0xd9, 0x38, 0xb2, 0xda, 0x63, 0x03, 0x27, 0x19, 0x29, 0xfb, 0x15, 0x6a, 0x75,
	0x0f, 0x76, 0xa6, 0xe1, 0xbb, 0x8b, 0xca, 0x07, 0xba, 0xce, 0xab, 0xa8, 0x3a, 0x6f, 0xec, 0x3a,
	0x44, 0x62, 0xb2, 0x64, 0xda, 0x1a, 0xf2, 0x60, 0x32, 0xd6, 0x25, 0x53, 0x45, 0x95, 0x4c, 0x03,
	0xc0, 0xa0, 0x64, 0x4a, 0x68, 0xfc, 0x21, 0xaa, 0x1f, 0xf0, 0x60, 0xc8, 0xa9, 0xa7, 0x6b, 0xa5,
	0x56, 0x1c, 0x59, 0xf5, 0xb1, 0x82, 0x48, 0xc2, 0xd9, 0x3f, 0x2d, 0xa2, 0x5a, 0x5f, 0x50, 0x31,
	0x09, 0xa5, 0x46, 0x7f, 0x32, 0x18, 0xb0, 0x30, 0x84, 0xb9, 0x1b, 0x4a, 0x23, 0x54, 0x10, 0x49,
	0x38, 0x59, 0x37, 0x6e, 0x73, 0x1e, 0x70, 0xb3, 0x6e, 0x64, 0x12, 0x30, 0xeb, 0x46, 0x90, 0xc0,
	0x1b, 0xa8, 0xa5, 0x92, 0x2e, 0x0c, 0xe9, 0x30, 0xa9, 0xd9, 0xde, 0x8b, 0x23, 0x6b, 0xce, 0x53,
	0x90, 0xa1, 0x62, 0x4a, 0xda, 0xbf, 0x29, 0xcb, 0x82, 0x0f, 0x92, 0x6a, 0x2b, 0xf0, 0x3c, 0xfa,
	0xae, 0x6e, 0x88, 0xeb, 0xdd, 0x75, 0x9f, 0xa0, 0x72, 0xf7, 0x60, 0x47, 0xef, 0x80, 0xf9, 0x44,
	0xd5, 0x48, 0x95, 0x9c, 0x9e, 0x94, 0x96, 0x45, 0xff, 0x81, 0x4c, 0x9f, 0x1a, 0xa4, 0x07, 0x14,
	0xfd, 0x63, 0x99, 0x3f, 0x80, 0x02, 0x4b, 0xc5, 0x09, 0x24, 0xb3, 0x7e, 0x12, 0x8c, 0xa9, 0x38,
	0x21, 0x80, 0x4a, 0x76, 0x93, 0x0f, 0x4f, 0x75, 0xda, 0x02, 0x4b, 0xf9, 0xf0, 0x94, 0x00, 0x8a,
	0x1f, 0xca, 0xf2, 0x51, 0x4c, 0xb8, 0x0f, 0x0f, 0xa1, 0xe6, 0x72, 0x71, 0xa5, 0xaa, 0xb6, 0x03,
	0x07, 0xf4, 0x85, 0x7c, 0x0f, 0x11, 0x43, 0xc4, 0xfe, 0x65, 0x79, 0x5a, 0xae, 0xf4, 0xdc, 0xf0,
	0xe5, 0x4d, 0x08, 0xbf, 0x46, 0x08, 0x65, 0x90, 0x6a, 0x57, 0x06, 0xc9, 0x42, 0xd5, 0x9d, 0x11,
	0x1d, 0x86, 0x10, 0xc3, 0xaa, 0xaa, 0x11, 0x8e, 0x25, 0x40, 0x14, 0x9e, 0x8b, 0x53, 0xe3, 0x3f,
	0xc7, 0xe9, 0x0f, 0xe9, 0x6e, 0x7b, 0xca, 0xc4, 0x97, 0x01, 0xbf, 0x09, 0xd5, 0x7f, 0x1b, 0xaa,
	0xfb, 0xa8, 0xde, 0xe7, 0x03, 0x78, 0x4f, 0xa9, 0x68, 0xb5, 0xe3, 0xc8, 0x6a, 0x84, 0x7c, 0xf0,
	0x42, 0xbe, 0xa9, 0x48, 0x42, 0x4a, 0xb9, 0x5e, 0x28, 0x40, 0xae, 0x9e, 0xca, 0x39, 0xa1, 0xd0,
	0x72, 0x9a, 0xd4, 0x72, 0x07, 0x01, 0x17, 0x3a, 0x70, 0x53, 0xb9, 0x71, 0xc0, 0x05, 0x49, 0x48,
	0xfc, 0x31, 0x42, 0x87, 0x5b, 0x07, 0xdf, 0x63, 0x1c, 0xdc, 0xa5, 0xf6, 0x22, 0x1c, 0xd7, 0xa7,
	0x0a, 0x22, 0x06, 0x6d, 0xff, 0xda, 0xd8, 0x87, 0x32, 0x40, 0x37, 0xcf, 0x86, 0x6b, 0x54, 0x26,
	0x6b, 0x68, 0x16, 0x4a, 0xf1, 0x43, 0x4e, 0xfd, 0xd0, 0x73, 0x85, 0x60, 0x8e, 0x3e, 0x6b, 0xa1,
	0x00, 0x17, 0x67, 0xe4, 0x12, 0x8f, 0x1f, 0xa0, 0x5b, 0x80, 0x11, 0x36, 0x60, 0xee, 0x29, 0x73,
	0x20, 0x07, 0xb4, 0x02, 0x3f, 0x23, 0x59, 0xd2, 0xfe, 0x5d, 0xfa, 0x30, 0xd9, 0x67, 0xf4, 0x94,
	0xdd, 0xc4, 0xeb, 0x3a, 0xcf, 0xbc, 0xd7, 0x25, 0xd4, 0x94, 0x16, 0x41, 0x27, 0xeb, 0xad, 0xb8,
	0x72, 0x3d, 0xa9, 0xb0, 0xb4, 0x27, 0x67, 0xa6, 0x9e, 0x00, 0xf4, 0x92, 0x07, 0x54, 0x35, 0xf6,
	0x00, 0xd5, 0x9e, 0x30, 0x71, 0x12, 0x38, 0xba, 0xe5, 0xb8, 0x10, 0x47, 0xd6, 0xac, 0x07, 0x88,
	0x51, 0x35, 0x69, 0x19, 0xfc, 0x12, 0xe1, 0x3d, 0x87, 0xf9, 0xc2, 0x15, 0xe7, 0x9b, 0x42, 0x70,
	0xf7, 0x68, 0x22, 0x5f, 0x91, 0x55, 0x1d, 0xb9, 0x7c, 0x13, 0xb2, 0x0f, 0x6d, 0xd4, 0xae, 0x0d,
	0x4d, 0xa3, 0xa9, 0x78, 0x3a, 0xec, 0x3f, 0x22, 0xab, 0xa6, 0x64, 0xc8, 0x15, 0xc3, 0xda, 0x3f,
	0x2f, 0x21, 0x24, 0x2d, 0x7b, 0x3e, 0x76, 0xa8, 0x78, 0x3b, 0xe9, 0x69, 0xa1, 0x2a, 0x09, 0x46,
	0x4c, 0xba, 0xb4, 0x9c, 0x74, 0x74, 0xb9, 0x04, 0x88, 0xc2, 0xf1, 0xc7, 0xa8, 0xa9, 0x93, 0x20,
	0xe0, 0xda, 0x83, 0xaa, 0x54, 0x4e, 0x40, 0x92, 0xf2, 0x78, 0x0f, 0xd5, 0xb7, 0xcf, 0xc6, 0x2e,
	0x9f, 0xba, 0xec, 0xdf, 0xf5, 0x6d, 0xe7, 0x75, 0x13, 0xb0, 0xce, 0x94, 0x0a, 0xb4, 0x6e, 0x13,
	0x7d, 0xfb, 0x17, 0x25, 0xd4, 0x92, 0x27, 0xf4, 0x4e, 0xc0, 0xbf, 0xa4, 0xfc, 0xed, 0x94, 0xad,
	0xd9, 0xcd, 0x53, 0xbe, 0xc6, 0x61, 0x97, 0xa6, 0x6e, 0xe5, 0x6b, 0xa4, 0xae, 0x2c, 0x23, 0xe5,
	0x4d, 0x57, 0x4d, 0xeb, 0x17, 0xb8, 0xe5, 0x00, 0xb5, 0xbf, 0x2a, 0xa1, 0x66, 0x7f, 0x72, 0x14,
	0x9e, 0x87, 0x82, 0x79, 0xef, 0xb8, 0x7f, 0xee, 0xa1, 0xca, 0x53, 0xea, 0x25, 0xff, 0x0a, 0x80,
	0xa5, 0x3e, 0xf5, 0x18, 0x01, 0x14, 0xff, 0x7f, 0xf2, 0x52, 0xaa, 0xa6, 0xf9, 0xc7, 0xce, 0x5c,
	0x01, 0xa0, 0x7e, 0x23, 0xd9, 0x7f, 0x2d, 0xa2, 0xd9, 0xad, 0x91, 0xcb, 0x7c, 0xd1, 0x73, 0x43,
	0x9d, 0x9d, 0xef, 0xb8, 0x57, 0x6c, 0x54, 0x23, 0x8c, 0x86, 0xba, 0x05, 0xd0, 0x54, 0xed, 0x26,
	0x0e, 0x08, 0xd1, 0x8c, 0xfd, 0xc3, 0x12, 0x6a, 0x6d, 0x4e, 0xc4, 0xc9, 0xa6, 0x80, 0x23, 0xe7,
	0x7f, 0x71, 0x9f, 0xd8, 0xbf, 0xaa, 0xa3, 0xea, 0x33, 0x9f, 0x3d, 0x3b, 0xc6, 0x8f, 0x8c, 0x3b,
	0x4a, 0x9b, 0x3f, 0x67, 0x9a, 0x01, 0xc4, 0x6e, 0x81, 0x18, 0x37, 0xd9, 0xba, 0x79, 0x06, 0x6b,
	0xd3, 0xb1, 0xa9, 0xa3, 0x98, 0xdd, 0x02, 0xc9, 0x9e, 0xd5, 0x99, 0x36, 0xbe, 0x36, 0x7a, 0x21,
	0x77, 0xb7, 0x03, 0xb7, 0x5b, 0x20, 0xd9, 0x96, 0xff, 0x46, 0xa6, 0xf9, 0xac, 0x2d, 0x9d, 0xcf,
	0xa9, 0x4a, 0x6a, 0xb7, 0x40, 0x72, 0x6d, 0xea, 0x4c, 0xa3, 0x55, 0x9f, 0xb1, 0xf9, 0x49, 0x81,
	0x33, 0x26, 0x55, 0x4d, 0xd9, 0x95, 0xa4, 0x2b, 0x09, 0x45, 0x96, 0xe1, 0x59, 0x85, 0xee, 0x16,
	0x48, 0xd2, 0xb5, 0x5c, 0x37, 0xfb, 0x67, 0x50, 0x61, 0x19, 0x0e, 0x49, 0x19, 0xe9, 0x10, 0xa3,
	0xcf, 0xf6, 0x38, 0xdf, 0x68, 0x80, 0xba, 0x3b, 0x53, 0xae, 0x98, 0xec, 0x6e, 0x81, 0xe4, 0x1b,
	0x13, 0x1b, 0x99, 0x47, 0x2e, 0xd4, 0xe2, 0x97, 0xdd, 0x22, 0x29, 0xc3, 0x2d, 0xf0, 0x1c, 0x7e,
	0x9c, 0x7f, 0x75, 0x75, 0xd0, 0x95, 0x53, 0x6b, 0xd6, 0x98, 0x3a, 0x79, 0xa5, 0x6d, 0x64, 0xea,
	0xfa, 0x4e, 0xeb, 0xea, 0xa9, 0xa9, 0xa0, 0xe6, 0xd4, 0xea, 0x05, 0x90, 0xa9, 0x30, 0x3b, 0xed,
	0x2b, 0x23, 0x02, 0x9c, 0x11, 0x11, 0x55, 0x8d, 0x6e, 0x64, 0x2e, 0xb8, 0xce, 0xad, 0xec, 0xa4,
	0x06, 0x25, 0x27, 0x35, 0xaf, 0xc2, 0x47, 0xc6, 0xb9, 0xdf, 0x99, 0xc9, 0x26, 0xf9, 0x94, 0x90,
	0x49, 0x9e, 0xde, 0x0e, 0x3b, 0x97, 0xcf, 0xc6, 0xce, 0x6d, 0xd0, 0xec, 0x4c, 0xf7, 0x69, 0x8e,
	0xdf, 0x2d, 0x90, 0xcb, 0xe7, 0xe9, 0x46, 0xe6, 0xb0, 0xe9, 0xcc, 0x66, 0xd7, 0x6c, 0x50, 0x72,
	0xcd, 0xc6, 0x67, 0xb7, 0x8e, 0xaa, 0xdb, 0x52, 0xc8, 0xfe, 0x01, 0x6a, 0xf7, 0x05, 0x67, 0xd4,
	0xd3, 0x77, 0xdc, 0x22, 0x6a, 0x3c, 0x1f, 0x8f, 0x02, 0xea, 0x24, 0xff, 0xc8, 0x92, 0xe9, 0x37,
	0x7e, 0x80, 0x66, 0xf6, 0x69, 0x28, 0x40, 0xd1, 0xfc, 0x43, 0xa0, 0x72, 0x11, 0x59, 0x45, 0x92,
	0xe3, 0xba, 0x0b, 0x17, 0x7f, 0x5e, 0x2a, 0x5c, 0xbc, 0x59, 0x2a, 0xbe, 0x7e, 0xb3, 0x54, 0xfc,
	0xd3, 0x9b, 0xa5, 0xe2, 0xcf, 0xfe, 0xb2, 0x54, 0x38, 0xaa, 0x41, 0xe5, 0xf1, 0xc9, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x2e, 0xa2, 0x9f, 0xf8, 0x50, 0x1f, 0x00, 0x00,
}
